package br.com.lunacore.ui;

import java.net.MalformedURLException;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Event;
import com.badlogic.gdx.scenes.scene2d.EventListener;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.scenes.scene2d.utils.FocusListener;
import com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop.Payload;
import com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop.Source;
import com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop.Target;
import com.badlogic.gdx.utils.Align;
import com.kotcrab.vis.ui.util.InputValidator;
import com.kotcrab.vis.ui.widget.MenuItem;
import com.kotcrab.vis.ui.widget.PopupMenu;
import com.kotcrab.vis.ui.widget.Separator;
import com.kotcrab.vis.ui.widget.VisLabel;
import com.kotcrab.vis.ui.widget.VisTable;
import com.kotcrab.vis.ui.widget.VisTextButton;
import com.kotcrab.vis.ui.widget.VisTextField;
import com.kotcrab.vis.ui.widget.VisValidatableTextField;

import br.com.lunacore.Editor;
import br.com.lunacore.UIState;
import br.com.lunacore.lunalire.LireComponent;
import br.com.lunacore.lunalire.LireObject;
import br.com.lunacore.lunalire.LireComponent.RefreshEvent;
import br.com.lunacore.lunalire.components.CameraComponent;
import br.com.lunacore.lunalire.components.ShapeRendererComponent;
import br.com.lunacore.lunalire.components.SpriteComponent;
import br.com.lunacore.lunalire.components.UIConstants;
import br.com.lunacore.lunalire.utils.InputValidatorConstants;

public class LireObjectPropertiesUI extends VisTable{
	
	UIState state;
	ClassPropertyUI classPropertyUI;
	
	public LireObjectPropertiesUI(UIState state) {
		this.state = state;
		construct();
		
	}
	
	public void refresh() {
		clear();
		construct();
	}
	
	public void construct() {

		if(Editor.getInstance().getSelectedObjects().size() == 1) {
			final LireObject obj = Editor.getInstance().getSelectedObjects().get(0);
		
			align(Align.topLeft);
			
			FocusListener selectAll = new FocusListener() {
				public void keyboardFocusChanged(FocusEvent event, Actor actor, boolean focused) {
					if(focused) {
						VisTextField vtf = (VisTextField) actor;
						vtf.selectAll();
					}
					super.keyboardFocusChanged(event, actor, focused);
				}
			};
			
			
			final VisTable main = new VisTable();
			
			main.align(Align.topLeft);
			
			VisLabel nameLbl = new VisLabel("Name");
			main.add(nameLbl).pad(10);
			
			final VisTextField nameTxt = new VisTextField(obj.getName());
			nameTxt.addListener(new ChangeListener() {
				public void changed(ChangeEvent event, Actor actor) {
					obj.setName(nameTxt.getText());
				}
			});
			main.add(nameTxt).pad(10);
			main.row();

			VisLabel zLbl = new VisLabel("Z Order");
			main.add(zLbl).pad(10);
			
			final VisValidatableTextField zTxt = new VisValidatableTextField(obj.getZOrder() + "");
			zTxt.addValidator(InputValidatorConstants.intValidator);
			zTxt.addListener(selectAll);
			zTxt.addListener(new ChangeListener() {
				public void changed(ChangeEvent event, Actor actor) {
					if(zTxt.isInputValid()) {
						obj.setZOrder(Integer.parseInt(zTxt.getText()));
					}
				}
			});
			main.add(zTxt).pad(10).row();
			
			main.add(new VisLabel("Custom class")).pad(5);
			final VisTextField classLbl = new VisTextField("");
		
			if(obj.getChildClass() != null) {
				classLbl.setText(obj.getChildClass().getCanonicalName());
			}
			
			classLbl.setDisabled(true);
			
			Editor.getInstance().getDragAndDrop().addTarget(new Target(classLbl) {
				public boolean drag(Source source, Payload payload, float x, float y, int pointer) {
					if(!(payload.getObject() instanceof Class)) return false;
					Class c = (Class) payload.getObject();
									
					return Editor.getInstance().isSubclassOf(c, LireObject.class);
				}

				public void drop(Source source, Payload payload, float x, float y, int pointer) {
					Class c = (Class) payload.getObject();
					if(LireObject.class.isAssignableFrom(c)) {
						classLbl.setText(c.getCanonicalName());
						obj.setChildClass(c);
						try {
							state.getSceneManager().compileAll(Editor.getInstance().getCurrentProject().child("core/src"));
							Editor.getInstance().getStage().refreshObjectParams();
							state.getSceneManager().saveScenes();
							//Atualizar objetos pegando os params
						} catch (ClassNotFoundException e) {
							e.printStackTrace();
						} catch (MalformedURLException e) {
							e.printStackTrace();
						}
						state.refreshObjectProperties();
						classPropertyUI.refresh();
						refresh();
						classPropertyUI.refresh();
					}
					
				}
				
			});
			
			main.add(classLbl).pad(5);
			
			
			if(obj.getChildClass() != null) {
				classPropertyUI = new ClassPropertyUI(state, obj.getChildClass(), obj);
				main.row();
				main.add(classPropertyUI).colspan(2);
			}
			
			InputValidator floatValidator = new InputValidator() {
				public boolean validateInput(String input) {
					try {
						Float.parseFloat(input);
						return true;
					}
					catch(Exception e) {
						return false;
					}
				}
			};
								
			add(main).growX().row();
			add(new Separator()).growX().row();
			
			add(UIConstants.getTransformConfigTable(obj.getTransform())).growX().row();
			add(new Separator()).growX().row();
			
			VisTextButton add = new VisTextButton("Add component");
			add.addListener(new ClickListener() {
				public void clicked(InputEvent event, float x, float y) {
					
					PopupMenu popup = new PopupMenu();
					
					Class[] compClazz = new Class[] {
							SpriteComponent.class,
							ShapeRendererComponent.class,
							CameraComponent.class
					};
					
					for(Class c : compClazz) {
						MenuItem menuClass = new MenuItem(c.getSimpleName());
						menuClass.addListener(new ClickListener() {
							public void clicked(InputEvent event, float x, float y) {
								//Adiciona a classe
							};
						});
						popup.addItem(menuClass);
					}
					
					for(Class c :Editor.getInstance().getUIState().getClassList().getClasses()) {
						if(Editor.getInstance().isSubclassOf(c, LireComponent.class)) {
							MenuItem menuClass = new MenuItem(c.getSimpleName());
							menuClass.addListener(new ClickListener() {
								public void clicked(InputEvent event, float x, float y) {
									//Adiciona a classe
								};
							});
							popup.addItem(menuClass);
						}
					}

					popup.showMenu(getStage(), Gdx.input.getX(), Gdx.graphics.getHeight() - Gdx.input.getY());
					
					event.stop();
					
					//Adiciona um componente
					//pega da lista pronta
					//pega da lista de classes
					super.clicked(event, x, y);
				}
			});
			
			add(add).colspan(getColumns()).growX().row();
			
			int i = 0; 
			for(final LireComponent lc : obj.getComponents()) {
				VisTable t = lc.getUITable(Editor.getInstance().getDragAndDrop());
				
				t.row();
				
				VisTextButton rmv = new VisTextButton("Remove component");
				rmv.addListener(new ClickListener() {
					public void clicked(InputEvent event, float x, float y) {
						//Remove o componente
						
						obj.getComponents().remove(lc);
						refresh();
						
						super.clicked(event, x, y);
					}
				});
				
				t.add(rmv).colspan(t.getColumns()).growX();
				
				t.addListener(new EventListener() {
					public boolean handle(Event event) {
						if(event instanceof RefreshEvent) {
							refresh();
							return true;
						}
						return false;
					}
				});
				add(t).prefHeight(100).grow().row();
				
				if(i < obj.getComponents().size()-1)
				add(new Separator()).growX().row();
				
				i++;
			}
		}
		
	}
	

}
