package br.com.lunacore.ui;

import java.util.Comparator;

import com.badlogic.gdx.Input.Buttons;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.ui.Tree.Node;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.kotcrab.vis.ui.widget.VisLabel;
import com.kotcrab.vis.ui.widget.VisTable;
import com.kotcrab.vis.ui.widget.VisTree;

import br.com.lunacore.Editor;
import br.com.lunacore.UIState;
import br.com.lunacore.custom.FileLabel;

public class ClassListUI extends VisTable{
	
	UIState state;
	
	public ClassListUI(UIState state) {
		super();
		this.state = state;
		construct();
	}
	
	public void construct() {
		if(Editor.getInstance().getCurrentProject() != null) {
			final VisTree tree = new VisTree();
			FileHandle proj = Editor.getInstance().getCurrentProject();
			Node n = new Node(new FileLabel(proj.child("core/src/br/com/lunacore")));
			n.expandTo();
			addToTree(proj.child("core/src/br/com/lunacore"), n);
			sortTreeNode(n);
			tree.add(n);
			add(tree).grow();
			
			tree.addListener(new ClickListener() {
				
				@Override
				public boolean touchDown(InputEvent event, float x, float y, int pointer, int button) {
					System.out.println("Clicou " + button);
					if(button == Buttons.RIGHT) {
						System.out.println("Clicou direito");
					}
					super.touchUp(event, x, y, pointer, button);
				}
				
				public void clicked(InputEvent event, float x, float y) {
					Node node = tree.getSelection().first();
					if(node != null) {
						FileLabel label = (FileLabel) node.getActor();
						
						state.setClassSelected(label.getHandle());
						state.refreshClassProperties();
					}
				}
			});
		}
	}
	
	public void addToTree(FileHandle handle, Node parentNode) {
		for(FileHandle f : handle.list()) {
			if(f.name().endsWith(".java")) {
				Node n = new Node(new FileLabel(f));
				if(f.isDirectory()) {
					addToTree(f, n);
				}
				parentNode.add(n);
			}
		}
	}
	
	public void sortTreeNode(Node n) {
		n.getChildren().sort(new Comparator<Node>() {
			public int compare(Node o1, Node o2) {
				
				FileLabel fileLabel1 = (FileLabel) o1.getActor();
				FileLabel fileLabel2 = (FileLabel) o2.getActor();

				if(fileLabel1.getHandle().isDirectory() && !fileLabel2.getHandle().isDirectory()) {
					return -1;
				}
				else if(!fileLabel1.getHandle().isDirectory() && fileLabel2.getHandle().isDirectory()) {
					return 1;
				}
				else {
					return fileLabel1.getHandle().name().compareTo(fileLabel2.getHandle().name());
				}
			}
		});
		
		for(Node n2 : n.getChildren()) {
			sortTreeNode(n2);
		}
	}

	public void refresh() {
		clear();
		construct();
	}

}
