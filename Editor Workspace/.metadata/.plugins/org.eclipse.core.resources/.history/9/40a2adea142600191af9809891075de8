package br.com.lunacore;

import java.io.File;
import java.util.ArrayList;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.kotcrab.vis.ui.VisUI;

import br.com.lunacore.lunalire.LireObject;
import br.com.lunacore.ui.LireSceneViewport;

public class Editor extends ApplicationAdapter {
	
	static Editor instance;
	static FileHandle rootFolder;
	
	FileHandle currentProject;
	UIState uiState;
	
	ArrayList<LireObject> selectedObjects;
	
	public FileHandle getCurrentProject() {
		return currentProject;
	}
	
	public void unselectAll() {
		for(LireObject lo : selectedObjects) {
			lo.setDebug(false);
		}
		selectedObjects.clear();
	}
	
	public void setSelectedObject(LireObject object) {
		if(object != getStage().getCenario()) {
			for(LireObject lo : selectedObjects) {
				lo.setDebug(false);
			}
			selectedObjects.clear();
			selectedObjects.add(object);
			object.setDebug(true);
		}
	}
	
	public void unselect(LireObject object) {
		if(selectedObjects.contains(object)) {
			selectedObjects.remove(object);
			object.setDebug(false);
		}
	}
	
	public void addSelectedObject(LireObject object) {
		if(object != getStage().getCenario()) {
			if(!selectedObjects.contains(object)) {
				selectedObjects.add(object);
				object.setDebug(true);
			}
		}

	}
	
	public void setSelectedObjects(ArrayList<LireObject> objects) {
		for(LireObject lo : selectedObjects) {
			lo.setDebug(false);
		}
		selectedObjects.clear();
		for(LireObject lo : objects) {
			lo.setDebug(true);
			selectedObjects.add(lo);
		}
	}
	
	public void addSelectedObjects(ArrayList<LireObject> objects) {
		for(LireObject lo : objects) {
			lo.setDebug(true);
			selectedObjects.add(lo);
		}
	}

	public void setCurrentProject(FileHandle currentProject) {
		this.currentProject = currentProject;
	}
	
	public static FileHandle getLunaLireRootFolder() {
		if(rootFolder == null)
		rootFolder = Gdx.files.absolute(new File(System.getProperty("user.dir")).getParentFile().getParentFile().getParentFile().getAbsolutePath());
	
		return rootFolder;
	}

	public void addActor(Actor actor) {
		uiState.addActor(actor);
	}
	
	public void create () {
		instance = this;
		selectedObjects = new ArrayList<LireObject>();
		//VisUI.load(Gdx.files.internal("skin/cloud-form-ui.json"));
		VisUI.load();
		AwesomeLibGDX.init();
		AwesomeLibGDX.addState(uiState = new UIState());
		AwesomeLibGDX.create();
	}
	
	public static Editor getInstance() {
		return instance;
	}

	public void render () {
		AwesomeLibGDX.render();
	}
	
	public void dispose () {
		AwesomeLibGDX.dispose();
		VisUI.dispose();
	}

	@Override
	public void resize(int width, int height) {
		AwesomeLibGDX.resize(width, height);
	}

	public void refreshClassList() {
		uiState.refreshClassList();
	}

	public Actor getCenario() {
		return uiState.stage.getCenario();
	}
	
	public LireSceneViewport getStage() {
		return uiState.stage;
	}

	public ArrayList<LireObject> getSelectedObjects() {
		return selectedObjects;
	}


}
