package br.com.lunacore.lunalire;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Comparator;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.InputListener;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.utils.XmlReader.Element;
import com.badlogic.gdx.utils.viewport.ScreenViewport;

import br.com.lunacore.input.KeyMapper;

public class LireScene {
	
	ArrayList<LireObject> objects;
	LireObject currentCamera;
	Stage stage;
	OrthographicCamera camera;
	
	public LireScene(Element root) {
		
		//Por enquanto carrega uma camera padrão, mas dps tenho q criar 
		//o componente de objeto de camera
		camera = new OrthographicCamera(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		stage = new Stage(new ScreenViewport(camera));
		
		camera.position.set(0, 0, 0);
		
		for(Element el : root.getChildrenByName("object")) {
			LireObject lo = new LireObject(el, null, this);
			
			if(lo.getChildClass() != null) {
				System.out.println("Child class: " + lo.getChildClass());
				try {
					lo = (LireObject) lo.getChildClass().getConstructor(Element.class, FileHandle.class, LireScene.class).newInstance(el, null, this);
				
					//pra cada campo, tem q ter um valor no elemento
					// se não tiver nada, ou não for da classe certa nao faz nada
					//classes aceitas por enquanto:
					//float
					//int
					//string
					//texture
					//-> Tenho q tentar colocar LireObject, mas pra isso eu preciso ter 
					//certeza de q todos os objetos já foram instanciados
					//e dar um jeito de pegar por ID, ou nome, seila
					//talvez usar um HashMap
					//vamos usar o objeto "custom"
					for(Field f : lo.getChildClass().getFields()) {
						Element custom = el.getChildByName("custom");
						
						if(custom.getAttribute(f.getName(), null) != null) {
							
							if(f.getType().equals(float.class)) {
								f.set(lo, custom.getFloat(f.getName()));
							}
							else if(f.getType().equals(int.class)) {
								f.set(lo, custom.getInt(f.getName()));
							}
							else if(f.getType().equals(String.class)) {
								f.set(lo, custom.get(f.getName()));
							}
							else if(f.getType().equals(Texture.class)) {
								f.set(lo, new Texture(custom.get(f.getName())));
							}
							else {
								//Classe não suportada (por enquanto)
							}
							
						}
					}
				
				}
				catch (Exception e) {
					System.out.println("Deu merda na hora de criar o objeto com classe custom");
					System.out.println("Classe custom foi: " + lo.getChildClass());
					e.printStackTrace();
				}
			}
			
			System.out.println("Loading object " + lo.getName());
			stage.addActor(lo);
		}
	}

	public void render(SpriteBatch sb) {
		stage.getActors().sort(new Comparator<Actor>() {
			public int compare(Actor o1, Actor o2) {
				LireObject obj1 = (LireObject)o1;
				LireObject obj2 = (LireObject)o2;

				return obj1.zorder - obj2.zorder;
			}});
		stage.draw();
	}
	
	public void update(float delta) {
		stage.act(delta);
		stage.getViewport().apply();
		
		
	}

	public void setCamera(OrthographicCamera camera2) {
		this.camera = camera2;
		stage.getViewport().setCamera(camera);
		stage.getViewport().apply();
	}

	public void dispose() {
		// TODO Auto-generated method stub
		
	}

}
