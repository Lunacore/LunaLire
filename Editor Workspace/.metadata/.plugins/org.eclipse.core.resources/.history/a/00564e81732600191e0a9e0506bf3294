package br.com.lunacore.ui;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;

import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.utils.Align;
import com.kotcrab.vis.ui.widget.VisLabel;
import com.kotcrab.vis.ui.widget.VisTable;

import br.com.lunacore.Editor;
import br.com.lunacore.UIState;
import br.com.lunacore.lunalire.LireObject;
import br.com.lunacore.lunalire.LireScene;

public class ClassPropertyUI extends VisTable{

	UIState state;
	FileHandle handle;
	
	public ClassPropertyUI(UIState state) {
		super();
		this.state = state;
		construct();
	}
	
	public void construct() {
		if(handle != null) {
			
			if(!handle.isDirectory() && handle.name().endsWith(".java")) {
				try {
					Class c = Editor.getInstance().getClassFromFile(handle);

					if(isSubclass(c, LireObject.class)) {
						VisLabel title = new VisLabel("Object");
						add(title).align(Align.top).growX();
					}
					else if(isSubclass(c, LireScene.class)) {
							VisLabel title = new VisLabel("Scene");
							add(title).align(Align.top).growX();
					}
					else {
						VisLabel title = new VisLabel("Custom class");
						add(title).align(Align.top).growX();
					}
					
					add(new VisTable()).grow();
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			
		}
	}
	
	
	@SuppressWarnings("unchecked")
	public boolean isSubclass(Class clazz, Class subclazz) {
		try {
			clazz.asSubclass(subclazz);
			return true;
		}
		catch(ClassCastException e) {
			return false;
		}
	}
	
	public void refresh() {
		clear();
		construct();
	}
	
	public void setClassSelection(FileHandle handle) {
		this.handle = handle;
	}

	public void setClassSelection(Class c) {
		// TODO Auto-generated method stub
		
	}
	
}
