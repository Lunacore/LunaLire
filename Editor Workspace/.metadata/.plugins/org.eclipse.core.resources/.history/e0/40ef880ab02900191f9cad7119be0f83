package br.com.lunacore.ui;

import java.util.HashMap;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Vector2;
import com.kotcrab.vis.ui.widget.VisTable;
import com.kotcrab.vis.ui.widget.VisWindow;

import br.com.lunacore.Editor;
import br.com.lunacore.custom.EditorWindow;

public class WindowCollection {
	
	HashMap<VisTable, EditorWindow> windows;
	HashMap<VisTable, Vector2> positioning;
	/*
	ClassListUI classList;
	FileExplorer explorer;
	LireObjectPropertiesUI objectProperties;
	ConsoleWindow console;
	ObjectHierarchy hierarchy;
	
	EditorWindow classWindow;
	EditorWindow explorerWindow;
	EditorWindow objPropWindow;
	EditorWindow consoleWindow;
	EditorWindow hierarchyWindow;
	 */
	
	public WindowCollection() {
		windows = new HashMap<VisTable, EditorWindow>();
		positioning = new HashMap<VisTable, Vector2>();
	}
	
	public void registerWindow(Class win, float x, float y) {
		try {
			VisTable tbl = (VisTable) win.newInstance();
			
			EditorWindow classWindow = new EditorWindow(tbl.getName());
			classWindow.addCloseButton();
			classWindow.add(tbl).grow();
			classWindow.setPosition(16, 240);
			classWindow.setSize(250, 450);
			classWindow.setResizable(true);
			classWindow.setPosition(10, Gdx.graphics.getHeight());
			
			windows.put(tbl, classWindow);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void insertIntoStage() {
		for(VisTable v : windows.keySet()) {
			if(windows.get(v).isOpen()) {
				//Posicionamento
				windows.get(v).setPosition(positioning.get(v).x, positioning.get(v).y);
				Editor.getInstance().getStage().addActor(windows.get(v));
			}
		}
		
	}

}
